// Generated by CoffeeScript 1.3.3
(function() {
  var client, cloudfiles, config, fs, spawn, walk;

  spawn = require('child_process').spawn;

  fs = require('fs');

  cloudfiles = require('cloudfiles');

  config = {
    auth: {
      username: 'codeseer',
      apiKey: '3ba10710c3c62939734df5f9c8f81c16'
    }
  };

  client = cloudfiles.createClient(config);

  exports.index = function(req, res) {
    return res.render('game/index', {
      game_src: "something"
    });
  };

  exports["new"] = function(req, res) {
    return res.render('game/new');
  };

  exports.upload = function(req, res) {
    var unzip;
    unzip = spawn('unzip', [req.files.game_zip.path, '-d', req.files.game_zip.path + '_unzip']);
    return unzip.on('exit', function(code) {
      if (code === 0) {
        return walk(req.files.game_zip.path + '_unzip', function(err, files) {
          return client.setAuth(function() {
            var newContainer;
            newContainer = new cloudfiles.Container(client, {
              name: req.body.name,
              cdnEnabled: true
            });
            return client.createContainer(newContainer, function(err, container) {
              if (err) {
                res.send('There was an error uploading the game.');
              } else {
                files.forEach(function(file) {
                  var outFile, pngcrush, uploadFile;
                  uploadFile = function() {
                    var remoteFile;
                    remoteFile = file.replace(req.files.game_zip.path + '_unzip/', '');
                    return container.addFile({
                      remote: remoteFile,
                      local: file
                    }, function(err, uploaded) {
                      return console.log(remoteFile + ' uploaded');
                    });
                  };
                  if (file.endsWith('.png')) {
                    outFile = file.replace('.png', '');
                    outFile += '_compressed.png';
                    pngcrush = spawn('pngcrush', [file, outFile]);
                    return pngcrush.on('exit', function(code) {
                      var mvFiles;
                      if (code !== 0) {
                        console.log('exit code ' + code + ' could not compress file ' + file);
                        return uploadFile();
                      } else {
                        console.log('Successfuly compressed ' + file);
                        mvFiles = spawn('mv', [outFile, file]);
                        return mvFiles.on('exit', function(code) {
                          if (code !== 0) {
                            console.log('exit code ' + code + ' could not overwrite non compressed file');
                            return uploadFile();
                          } else {
                            return uploadFile();
                          }
                        });
                      }
                    });
                  } else {
                    return uploadFile();
                  }
                });
              }
              return res.send(container.cdnUri);
            });
          });
        });
      } else {
        return res.send('Unable to unzip your file.');
      }
    });
  };

  walk = function(dir, done) {
    var results;
    results = [];
    return fs.readdir(dir, function(err, list) {
      var pending;
      if (err) {
        return done(err);
      }
      pending = list.length;
      if (!pending) {
        return done(null, results);
      }
      return list.forEach(function(file) {
        file = dir + '/' + file;
        return fs.stat(file, function(err, stat) {
          if (stat && stat.isDirectory()) {
            return walk(file, function(err, res) {
              results = results.concat(res);
              if (!--pending) {
                return done(null, results);
              }
            });
          } else {
            results.push(file);
            if (!--pending) {
              return done(null, results);
            }
          }
        });
      });
    });
  };

}).call(this);
